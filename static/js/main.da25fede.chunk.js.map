{"version":3,"sources":["components/ResultChain.js","components/Selectors.js","components/Timer.js","SessionStorage.js","Helpers.js","Checkers.js","Game.js","index.js"],"names":["ResultChain","props","Grid","item","xs","JSON","parse","sessionStorage","getItem","map","index","style","position","top","selectedWord","useStyles","makeStyles","theme","timeSelector","bottom","formControl","width","fontSize","marginLeft","Selectors","classes","useState","answerProb","setAnswerProb","language","setLanguage","time","setTime","container","spacing","FormControl","className","InputLabel","root","selector","id","Select","labelId","value","onChange","event","target","onSelectDifficulty","handleDifficultyChange","MenuItem","onSelectLanguage","handleLanguageChange","Input","margin","Number","onSelectTime","inputProps","step","min","max","type","timer","marginTop","textAlign","Timer","setTimer","useEffect","isStop","interval","setInterval","clearInterval","handleGameOver","addUsedWordsToSS","word","usedWordsArr","setItem","stringify","makeUpperCase","charAt","toLocaleUpperCase","slice","makeLowerCase","toLocaleLowerCase","getRandomValueFromArray","array","randValue","Math","floor","random","length","checkIsWordUsed","includes","checkLettersAreEqual","formerWord","latterWord","lastLetterOfFormerWord","firstLetterOfLatterWord","button","height","upperContainer","mainContainer","borderRadius","wordBoard","color","usedWords","resultContainer","lostText","winText","Game","isRoundStart","setIsRoundStart","isGameOver","setIsGameOver","isComputerThink","setIsComputerThink","isGameStart","setIsGameStart","isYouWin","setIsYouWin","wordsOfComputer","setWordsOfComputer","setSelectedWord","speech","setSpeech","nameList","trWords","enWords","randWord","handleListenFromUser","synth","window","speechSynthesis","utterThis","SpeechSynthesisUtterance","lang","speak","computerSays","mic","SpeechRecognition","webkitSpeechRecognition","continuous","interimResults","setTimeout","start","stop","onresult","transcript","Array","from","results","result","join","onend","checkIsWordValid","onerror","console","log","error","startTheRound","getRandomWord","correctWordArray","filter","clear","isWordInList","checkIsWordInList","areLettersEqual","isWordUsed","isComputerLost","num","checkComputerLost","computerThinkingTime","Button","variant","onClick","disabled","direction","createMuiTheme","palette","primary","light","main","dark","contrastText","secondary","action","disabledBackground","ReactDOM","render","ThemeProvider","document","getElementById"],"mappings":"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","file":"static/js/main.da25fede.chunk.js","sourcesContent":["import React from \"react\";\nimport { Grid } from \"@material-ui/core\";\n\nconst ResultChain = (props) => {\n  return (\n    <>\n      <Grid item xs={6}>\n        <p>TOM</p>\n      </Grid>\n      <Grid item xs={6}>\n        <p>YOU</p>\n      </Grid>\n      {JSON.parse(sessionStorage.getItem(\"usedWords\")) ? (\n        JSON.parse(sessionStorage.getItem(\"usedWords\")).map((item, index) => {\n          return (\n            <>\n              {index % 2 === 0 && (\n                <Grid item xs={6}>\n                  <ul>\n                    <li>{item}</li>\n                  </ul>\n                </Grid>\n              )}\n              {index % 2 === 1 && (\n                <Grid style={{ position: \"relative\", top: 30 }} item xs={6}>\n                  <ul>\n                    <li>{item} </li>\n                  </ul>\n                </Grid>\n              )}\n            </>\n          );\n        })\n      ) : (\n        <Grid item xs={6}>\n          <ul>\n            <li>{props.selectedWord}</li>\n          </ul>\n        </Grid>\n      )}\n    </>\n  );\n};\n\nexport default ResultChain;\n","import React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport {\n  InputLabel,\n  Select,\n  MenuItem,\n  FormControl,\n  Input,\n  Grid,\n} from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n  timeSelector: {\n    position: \"relative\",\n    bottom: 15,\n  },\n  formControl: {\n    width: 100,\n    fontSize: 30,\n    marginLeft: 100,\n  },\n}));\n\nconst Selectors = (props) => {\n  const classes = useStyles();\n  const [answerProb, setAnswerProb] = useState(0.3);\n  const [language, setLanguage] = useState(\"tr\");\n  const [time, setTime] = useState(8);\n\n  const handleDifficultyChange = (event) => {\n    setAnswerProb(event.target.value);\n    props.onSelectDifficulty(event.target.value);\n  };\n\n  const handleLanguageChange = (event) => {\n    setLanguage(event.target.value);\n    props.onSelectLanguage(event.target.value);\n  };\n\n  const handleTimeChange = (event) => {\n    setTime(event.target.value === \"\" ? \"\" : Number(event.target.value));\n    props.onSelectTime(\n      event.target.value === \"\" ? \"\" : Number(event.target.value)\n    );\n  };\n  return (\n    <>\n      <Grid container spacing={3}>\n        <Grid item xs={4}>\n          <FormControl className={classes.formControl}>\n            <InputLabel\n              classes={{\n                root: classes.selector,\n              }}\n              id=\"demo-simple-select-label\"\n            >\n              Difficulty\n            </InputLabel>\n            <Select\n              labelId=\"demo-simple-select-label\"\n              id=\"demo-simple-select\"\n              value={answerProb}\n              onChange={(event) => handleDifficultyChange(event)}\n            >\n              <MenuItem value={0.4}>Easy</MenuItem>\n              <MenuItem value={0.3}>Normal</MenuItem>\n              <MenuItem value={0.2}>Hard</MenuItem>\n              <MenuItem value={0.05}>Master</MenuItem>\n            </Select>\n          </FormControl>\n        </Grid>\n        <Grid item xs={4}>\n          <FormControl className={classes.formControl}>\n            <InputLabel\n              classes={{\n                root: classes.selector,\n              }}\n              id=\"demo-simple-select-label\"\n            >\n              Language\n            </InputLabel>\n            <Select\n              labelId=\"demo-simple-select-label\"\n              id=\"demo-simple-select\"\n              value={language}\n              onChange={(event) => handleLanguageChange(event)}\n            >\n              <MenuItem value={\"tr\"}>Turkish</MenuItem>\n              <MenuItem value={\"en-US\"}>English</MenuItem>\n            </Select>\n          </FormControl>\n        </Grid>\n        <Grid item xs={4}>\n          <div className={classes.timeSelector}>\n            <p>Time (seconds)</p>\n            <Input\n              value={time}\n              margin=\"dense\"\n              onChange={handleTimeChange}\n              inputProps={{\n                step: 1,\n                min: 5,\n                max: 100,\n                type: \"number\",\n                \"aria-labelledby\": \"input-slider\",\n              }}\n            />\n          </div>\n        </Grid>\n      </Grid>\n    </>\n  );\n};\n\nexport default Selectors;\n","import React, { useEffect, useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n  timer: {\n    fontSize: \"5em\",\n    marginTop: \"20%\",\n    textAlign: \"center\",\n  },\n}));\n\nconst Timer = (props) => {\n  const classes = useStyles();\n  const [timer, setTimer] = useState(props.time);\n  useEffect(() => {\n    if (timer === 0 || props.isStop) {\n      props.handleGameOver(true);\n      clearInterval(timer);\n    } else {\n      const interval = setInterval(() => {\n        setTimer((timer) => timer - 1);\n      }, 1000);\n      return () => {\n        clearInterval(interval);\n      };\n    }\n  }, [timer]);\n\n  return <div className={classes.timer}>{timer}</div>;\n};\n\nexport default Timer;\n","export const addUsedWordsToSS = (word) => {\n  let usedWordsArr = sessionStorage.getItem(\"usedWords\");\n  if (!usedWordsArr) {\n    sessionStorage.setItem(\"usedWords\", JSON.stringify([word]));\n  } else {\n    usedWordsArr = JSON.parse(usedWordsArr);\n    usedWordsArr = [...usedWordsArr, word];\n    sessionStorage.setItem(\"usedWords\", JSON.stringify(usedWordsArr));\n  }\n};\n","export const makeUpperCase = (word, language) => {\n  return word.charAt(0).toLocaleUpperCase(language) + word.slice(1);\n};\n\nexport const makeLowerCase = (word, language) => {\n  return word.charAt(0).toLocaleLowerCase(language) + word.slice(1);\n};\n\nexport const getRandomValueFromArray = (array, language) => {\n  const randIndex = Math.floor(Math.random() * (array.length + 1));\n  let randValue = array[randIndex];\n  randValue = makeUpperCase(randValue, language);\n  return randValue;\n};\n","import { makeUpperCase, makeLowerCase } from \"./Helpers\";\n\nexport const checkIsWordUsed = (word, language) => {\n  word = makeUpperCase(word, language);\n  const usedWordsArr = JSON.parse(sessionStorage.getItem(\"usedWords\"));\n  if (usedWordsArr) {\n    const isWordUsed = usedWordsArr.includes(word);\n    return isWordUsed;\n  } else {\n    return false;\n  }\n};\n\nexport const checkIsWordInList = (word, nameList) => {\n  const isWordInList = nameList.includes(word);\n  return isWordInList;\n};\n\nexport const checkLettersAreEqual = (formerWord, latterWord, language) => {\n  let lastLetterOfFormerWord = formerWord.charAt(formerWord.length - 1);\n  lastLetterOfFormerWord = makeLowerCase(lastLetterOfFormerWord, language);\n  let firstLetterOfLatterWord = latterWord.charAt(0);\n  firstLetterOfLatterWord = makeLowerCase(firstLetterOfLatterWord, language);\n  const areLettersEqual = lastLetterOfFormerWord === firstLetterOfLatterWord;\n  return areLettersEqual;\n};\n\nexport const checkComputerLost = (word, answerProb) => {\n  const num = Math.random();\n  const isWordUsed = checkIsWordUsed(word);\n  if (num < answerProb || isWordUsed) {\n    return true;\n  } else {\n    return false;\n  }\n};\n","import React, { useState, useEffect } from \"react\";\nimport trWords from \"./wordsData/tr-names\";\nimport enWords from \"./wordsData/en-names\";\nimport ResultChain from \"./components/ResultChain\";\nimport Selectors from \"./components/Selectors\";\nimport \"./Game.css\";\nimport Timer from \"./components/Timer\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Button, Grid } from \"@material-ui/core\";\nimport { addUsedWordsToSS } from \"./SessionStorage\";\nimport {\n  checkIsWordUsed,\n  checkIsWordInList,\n  checkLettersAreEqual,\n  checkComputerLost,\n} from \"./Checkers.js\";\nimport { makeLowerCase, getRandomValueFromArray } from \"./Helpers.js\";\n\nconst useStyles = makeStyles((theme) => ({\n  button: {\n    width: 250,\n    height: 70,\n    fontSize: \"1.5em\",\n  },\n  upperContainer: {\n    height: \"30%\",\n    marginTop: 20,\n  },\n  mainContainer: {\n    borderRadius: 5,\n    width: \"70%\",\n    height: \"80%\",\n    margin: \"0 auto\",\n    position: \"relative\",\n    top: \"10%\",\n    textAlign: \"center\",\n  },\n  wordBoard: {\n    fontSize: \"1.5em\",\n    textAlign: \"left\",\n    marginLeft: \"10%\",\n    \"& span\": {\n      color: \"#0288d1\",\n    },\n  },\n  usedWords: {\n    textAlign: \"left\",\n    fontSize: \"1.2em\",\n    \"& p\": {\n      color: \"#0288d1\",\n      marginLeft: 35,\n    },\n  },\n  resultContainer: {\n    marginTop: 10,\n  },\n  lostText: {\n    color: \"red\",\n    margin: \"auto\",\n    fontSize: \"3.5em\",\n  },\n  winText: {\n    color: \"#0288d1\",\n    margin: \"auto\",\n    fontSize: \"3.5em\",\n  },\n}));\n\nconst Game = () => {\n  const classes = useStyles();\n  const [isRoundStart, setIsRoundStart] = useState(false);\n  const [isGameOver, setIsGameOver] = useState(false);\n  const [isComputerThink, setIsComputerThink] = useState(false);\n  const [isGameStart, setIsGameStart] = useState(false);\n  const [isYouWin, setIsYouWin] = useState(false);\n  const [wordsOfComputer, setWordsOfComputer] = useState(null);\n  const [selectedWord, setSelectedWord] = useState(null);\n  const [speech, setSpeech] = useState(\"\");\n  const [answerProb, setAnswerProb] = useState(0.3);\n  const [language, setLanguage] = useState(\"tr\");\n  const [time, setTime] = useState(8);\n\n  useEffect(() => {\n    if (isComputerThink) {\n      const nameList = language === \"tr\" ? trWords : enWords;\n      const interval = setInterval(() => {\n        const randWord = getRandomValueFromArray(nameList, language);\n        setWordsOfComputer(randWord);\n      }, 100);\n      return () => {\n        clearInterval(interval);\n      };\n    }\n  }, [isComputerThink]);\n\n  const handleDifficultyChange = (answerProb) => {\n    setAnswerProb(answerProb);\n  };\n\n  const handleLanguageChange = (language) => {\n    setLanguage(language);\n  };\n\n  const handleTimeChange = (time) => {\n    setTime(time);\n  };\n\n  const computerSays = (word) => {\n    let synth = window.speechSynthesis;\n    const utterThis = new SpeechSynthesisUtterance(word);\n    utterThis.lang = language;\n    synth.speak(utterThis);\n  };\n\n  const handleListenFromUser = (formerWord) => {\n    computerSays(formerWord);\n    const SpeechRecognition =\n      window.SpeechRecognition || window.webkitSpeechRecognition;\n    const mic = new SpeechRecognition();\n    mic.continuous = true;\n    mic.interimResults = true;\n    mic.lang = language;\n    setTimeout(() => {\n      mic.start();\n    }, 500);\n    setTimeout(() => {\n      mic.stop();\n    }, (time - 1) * 1000);\n\n    mic.onresult = (event) => {\n      const transcript = Array.from(event.results)\n        .map((result) => result[0])\n        .map((result) => result.transcript)\n        .join(\"\");\n      mic.stop();\n      mic.onend = () => {\n        mic.stop();\n        setSpeech(transcript);\n        checkIsWordValid(formerWord, transcript);\n        addUsedWordsToSS(transcript);\n      };\n      mic.onerror = (event) => {\n        console.log(event.error);\n      };\n    };\n  };\n\n  const handleGameOver = (isGameOver) => {\n    addUsedWordsToSS(selectedWord);\n    setIsGameOver(isGameOver);\n    setIsGameStart(false);\n    setIsRoundStart(false);\n  };\n\n  const startTheGame = () => {\n    setIsYouWin(false);\n    setIsGameOver(false);\n    startTheRound();\n    setIsGameStart(true);\n  };\n\n  const startTheRound = (word) => {\n    setIsRoundStart(true);\n    const formerWord = getRandomWord(word);\n    handleListenFromUser(formerWord);\n  };\n\n  const getRandomWord = (formerWord) => {\n    const nameList = language === \"tr\" ? trWords : enWords;\n    if (typeof formerWord === \"string\") {\n      const correctWordArray = nameList.filter((word) =>\n        checkLettersAreEqual(formerWord, word)\n      );\n      const randWord = getRandomValueFromArray(correctWordArray);\n      setSelectedWord(randWord);\n      return randWord;\n    } else {\n      const randWord = getRandomValueFromArray(nameList);\n      setSelectedWord(randWord);\n      sessionStorage.clear();\n      return randWord;\n    }\n  };\n\n  const checkIsWordValid = (formerWord, latterWord) => {\n    const nameList = language === \"tr\" ? trWords : enWords;\n    latterWord = makeLowerCase(latterWord, language);\n    const isWordInList = checkIsWordInList(latterWord, nameList);\n    const areLettersEqual = checkLettersAreEqual(\n      formerWord,\n      latterWord,\n      language\n    );\n    const isWordUsed = checkIsWordUsed(latterWord, language);\n    const isComputerLost = checkComputerLost(formerWord, answerProb);\n    const computerThinkingTime = Math.floor(Math.random() * 3000) + 1000;\n    addUsedWordsToSS(formerWord);\n\n    setTimeout(() => {\n      setIsRoundStart(false);\n      if (areLettersEqual && isWordInList && !isWordUsed) {\n        setIsComputerThink(true);\n        setTimeout(() => {\n          setSpeech(\"\");\n          if (isComputerLost) {\n            setIsYouWin(true);\n            setIsGameStart(false);\n          } else {\n            startTheRound(latterWord);\n          }\n          setIsComputerThink(false);\n        }, computerThinkingTime);\n      } else {\n        setIsGameOver(true);\n        setSpeech(\"\");\n        setIsGameStart(false);\n      }\n    }, 500);\n  };\n\n  return (\n    <div className={classes.mainContainer}>\n      <div className={classes.upperContainer}>\n        <Selectors\n          onSelectDifficulty={handleDifficultyChange}\n          onSelectLanguage={handleLanguageChange}\n          onSelectTime={handleTimeChange}\n        />\n        <Button\n          className={classes.button}\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={startTheGame}\n          disabled={isGameStart}\n        >\n          Start the Game\n        </Button>\n      </div>\n      <Grid container>\n        <Grid item xs={6}>\n          {isRoundStart && (\n            <div className={classes.wordBoard}>\n              <h1>\n                <span>TOM: &nbsp;</span>\n                {selectedWord}\n              </h1>\n              <h1>\n                <span>YOU: &nbsp;</span>\n                {speech}\n              </h1>\n            </div>\n          )}\n          {isComputerThink && (\n            <div className={classes.wordBoard}>\n              <h1>\n                <span>YOU: &nbsp;</span>\n                {speech}\n              </h1>\n              <h1>\n                <span>TOM: &nbsp;</span>\n                {wordsOfComputer}\n              </h1>\n            </div>\n          )}\n          <div className={classes.resultContainer}>\n            {isGameOver && <h1 className={classes.lostText}>You Lost!</h1>}\n            {isYouWin && (\n              <div>\n                <h3>Tom couldn't find any name!</h3>\n                <h1 className={classes.winText}>You Win!</h1>\n              </div>\n            )}\n          </div>\n        </Grid>\n        <Grid item xs={2}>\n          {isRoundStart && (\n            <Timer time={time} handleGameOver={handleGameOver} />\n          )}\n        </Grid>\n        <Grid\n          className={classes.usedWords}\n          item\n          container\n          xs={4}\n          direction=\"row\"\n        >\n          {(isGameOver || isYouWin) && (\n            <>\n              <ResultChain selectedWord={selectedWord} />\n            </>\n          )}\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n\nexport default Game;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Game from \"./Game\";\nimport { createMuiTheme } from \"@material-ui/core/styles\";\nimport { ThemeProvider } from \"@material-ui/core/styles\";\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      light: \"#ef9a9a\",\n      main: \"#ef5350\",\n      dark: \"#d32f2f\",\n      contrastText: \"#fff\",\n    },\n    secondary: {\n      light: \"#ff7961\",\n      main: \"#00000\",\n      dark: \"#ba000d\",\n      contrastText: \"#000\",\n    },\n    action: {\n      disabledBackground: \"grey\",\n      disabled: \"white\",\n    },\n  },\n});\n\nReactDOM.render(\n  <ThemeProvider theme={theme}>\n    <Game />\n  </ThemeProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}